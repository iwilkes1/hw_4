README for 600.335 assignment 4 Decision Trees

README -- description document.

compile.sh -- file to compile the java code.

run_traditional.sh -- bash script to run the classic decision tree classifier

src/ -- source code folder
  Makefile -- File used to compile the code

  data_splitter.py -- script to split data sets into training sets and test sets
			required for the mushroom and voting record data sets.
			The script splits the data with 70% in training and
			the other 30% in the test set.

			It is run from the top level directory by calling:

	python src/data_splitter.py <input_file> <training file> <testing file>



  edu/jhu/cs/wilkes/cs335/assignment4/traditional/ -- folder containing source
	code for a traditional information gain based decision tree.
  
    CaseForClassification.java -- class for a case to be classified. Splits up
 				attributes and the classification.

    DecisionTreeClassifier.java -- main class for the traditional decision
				tree classifier.  Reads in the data files,
				parses them, and then creates a decision tree
				and classifies a data set.

    DecisionTreeNode.java -- 	Class for representing decision tree nodes.
				handles both the creation of the decision
				tree recursively, as well as the classification
				of test cases.

    IdentifierProbabilityPair.java -- class for matching the probability of an
				attribute with the value of that attribute
				for storage in a priority queue.

    IdentifierProbabilities.java -- data structure for storing probability 
				pairs, and for looking up the most common value
				of each attribute, as well as the probability
				of each attribute value.



  doc/ -- directory containing relevant documentation, including JavaDocs.

  data/ -- directory containing input files. Some of these files have been
		produced by running the data_split.py script, others have not.
		training and testing pairs are listed below. Training/Testing 
		files must be either comma separated value, or have spaces
		between values.  The classificaiton must be the first value,
		and all others shall be the attributes of that case.

	The following are training and testing pairs:
	house_votes_training.data 	house_votes_testing.data
	monks-1.train			monks-1.test
	monks-2.train			monks-2.test
	monks-3.train			monks-3.test
	mushroom_training.txt		mushroom_tesing.txt


  output/ -- a directory containing the output of various runs of the program.
		The runs will be named based on their data.	

  bin/ -- a directory for .class files and other compiled code.

How to run the code:
In order to run the code, first it must be compiled.  This can be achieved by
running the following command from the top level directory:

./compile.sh

Once the code is compiled, to run enter the following style command:

./run_traditional.sh <path to training data> <path to test data>

The classifier will then output data about the amount of time required to 
build the training set, the performance of classifying the training set,
then the performance of classifying the testing set.

Reflections:

This first classifier was fairly easy to build, but I forsee the genetic
algorithm being much tougher.
