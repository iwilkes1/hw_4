package edu.jhu.cs.wilkes.cs335.assignment4.traditional;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;

/**
 * Main class to perform classification of data sets
 * @author Ian Wilkes
 *
 */
public class DecisionTreeClassifier {

	public static void main(String[] args) {
		// checking the number of arguments
		if (args.length != 2) {
			System.err.println("Error: incorrect number of arguments.");
			System.out.println("Usage: DecisionTreeClassifier <path to training data> <path to testing data>");
			System.exit(1);
		}

		List<CaseForClassification> trainingData = null;
		List<CaseForClassification> testingData = null;
		
		try {
			trainingData = parseDataFile(args[0]);
		} catch (FileNotFoundException e) {
			System.err.println("Error: data could not be found for file: \n" + args[0]);
			System.exit(1);
		}
		try {
			testingData = parseDataFile(args[1]);
		} catch (FileNotFoundException e) {
			System.err.println("Error: data could not be found for file: \n" + args[1]);
			System.exit(1);
		}

		List<Integer> identifierIndices = new ArrayList<Integer>();
		for (int i = 0;	i < trainingData.get(0).getNumIdentifiers(); i++) {
			identifierIndices.add(i);
		}
		
		long start = System.currentTimeMillis();
		DecisionTreeNode classificationTree = new DecisionTreeNode(identifierIndices, null, 
					trainingData);
		long endTraining = System.currentTimeMillis();
		System.out.println("training finished in " + (endTraining - start) + " ms");
		
		String positiveClassification = testingData.get(0).getClassification();
		System.out.println("Classification of training set:");
		classifyDataSet(trainingData, classificationTree, positiveClassification);
		long endTrainingTest = System.currentTimeMillis();
		System.out.println("classification of training set took: " + 
				(endTraining - endTrainingTest) + " ms");
		System.out.println("");	
		System.out.println("Classification of test set:");
		classifyDataSet(testingData, classificationTree, positiveClassification);

		long endTime = System.currentTimeMillis();
		System.out.println("classification of test set took: " + (endTime - endTrainingTest) + " ms");
		
		/*
		//TODO remove unnecessary print
		for (CaseForClassification element : trainingData) {
			System.out.println(element);
		}
		*/

	}

	/**
	 * Performs classification on a set of cases to classify, the classification tree, and a positive 
	 * classification.
	 * @param testingData the data to classify
	 * @param classificationTree the pre-built decision tree
	 * @param positiveClassification an example of a positive classification.
	 */
	private static void classifyDataSet(
			List<CaseForClassification> testingData,
			DecisionTreeNode classificationTree, String positiveClassification) {
		String classification;
		int falsePositives = 0;
		int falseNegatives = 0;
		int truePositives = 0;
		int trueNegatives = 0;
		
		for (CaseForClassification testCase : testingData) {
			classification = classificationTree.classify(testCase);
			if (testCase.getClassification().equals(positiveClassification)) {
				if (classification.equals(testCase.getClassification())) {
					truePositives++;
				} else {
					falseNegatives++;
				}
			} else {
				if (classification.equals(testCase.getClassification())) {
					trueNegatives++;
				} else {
					falsePositives++;
				}
			}
		}
		
		System.out.println("test data size: " + testingData.size());
		System.out.println("accuracy: " + (trueNegatives + truePositives) / (1.0 * testingData.size()));
		System.out.println("precision: " + truePositives/ (1.0 * (truePositives + falsePositives)));
		System.out.println("recall: " +  truePositives/ (1.0 * (falseNegatives + truePositives)));
	}

	/**
	 * Reads a data file and produces a list of the cases to be classified.
	 * @param reader the Scanner which ha
	 * @return
	 * @throws FileNotFoundException 
	 */
	private static List<CaseForClassification> parseDataFile (String fileToRead) throws FileNotFoundException {
		Scanner reader = new Scanner(new FileReader(fileToRead));
		List<CaseForClassification> toReturn = new ArrayList<CaseForClassification>();
		List<String> identifiers;
		String currentLine;
		
		while(reader.hasNextLine()) {
			currentLine = reader.nextLine();
			identifiers = Arrays.asList(currentLine.split(","));
			toReturn.add(new CaseForClassification(identifiers.get(0), identifiers.subList(1, identifiers.size())));
		}
		if (toReturn.isEmpty()) {
			System.out.println("Error: data file is null");
			return null;
		}
		return toReturn;
	}


	
}
